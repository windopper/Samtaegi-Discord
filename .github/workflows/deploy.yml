# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "dev" ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: create env file
      working-directory: ./
      run: |
        pwd
        touch .env
        echo token=${{ secrets.SAMTAEGI_BOT_TOKEN }} >> .env
        echo clientId=${{ secrets.SAMTAEGI_CLIENT_ID }} >> .env
        echo devGuildId=${{ secrets.SAMTAEGI_DEV_GUILD_ID }} >> .env
        echo openaiApiKey=${{ secrets.SAMTAEGI_OPENAI_API_KEY }} >> .env
        echo youtubeApiKey=${{ secrets.SAMTAEGI_YOUTUBE_API_KEY }} >> .env
        cat .env

    - name: build server
      working-directory: ./
      run: |
        npm i
        npm run build

    - name: zip file
      run: zip -r samtaegi.zip ./dist ./scripts ./appspec.yml ./.env ./package.json ./ecosystem.config.js

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: upload to s3
      run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./samtaegi.zip s3://samtaegi-bucket/deploy/

    - name: deploy with AWS code deploy
      run: aws deploy create-deployment
        --application-name samtaegi-code-deploy
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name GROUP
        --s3-location bucket=samtaegi-bucket,bundleType=zip,key=deploy/samtaegi.zip
